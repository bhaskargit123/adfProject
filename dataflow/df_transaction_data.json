{
	"name": "df_transaction_data",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_adls",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_adls",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          DateKey as date 'MM/dd/yyyy',",
				"          channelKey as short,",
				"          StoreKey as short,",
				"          ProductKey as short,",
				"          PromotionKey as short,",
				"          CurrencyKey as boolean,",
				"          UnitCost as double,",
				"          UnitPrice as double,",
				"          SalesQuantity as short,",
				"          ReturnQuantity as short,",
				"          ReturnAmount as double,",
				"          DiscountQuantity as short,",
				"          DiscountAmount as double,",
				"          TotalCost as double,",
				"          SalesAmount as double",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'bronze',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     wildcardPaths:['TransactionData*.csv']) ~> source1",
				"source1 select(mapColumn(",
				"          DateKey,",
				"          channelKey,",
				"          StoreKey,",
				"          ProductKey,",
				"          PromotionKey,",
				"          UnitCost,",
				"          UnitPrice,",
				"          SalesQuantity,",
				"          ReturnQuantity,",
				"          ReturnAmount,",
				"          DiscountQuantity,",
				"          DiscountAmount,",
				"          TotalCost,",
				"          SalesAmount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 filter(year(DateKey)==2023) ~> filter1",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     fileSystem: 'silver',",
				"     partitionFileNames:['transaction.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}